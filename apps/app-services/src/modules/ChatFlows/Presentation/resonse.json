{
    "nodes": [
        {
            "id": "openAIEmbeddings_0",
            "position": { "x": 461.7018426562151, "y": 655.711428475323 },
            "type": "customNode",
            "data": {
                "loadMethods": {},
                "label": "OpenAI Embeddings",
                "name": "openAIEmbeddings",
                "version": 4,
                "type": "OpenAIEmbeddings",
                "icon": "/Applications/RamApps/AI/Flowise/packages/server/node_modules/flowise-components/dist/nodes/embeddings/OpenAIEmbedding/openai.svg",
                "category": "Embeddings",
                "description": "OpenAI API to generate embeddings for a given text",
                "baseClasses": ["OpenAIEmbeddings", "Embeddings"],
                "credential": "1389c6c9-eb45-4632-a633-17748dc5d31b",
                "inputs": {
                    "modelName": "text-embedding-ada-002",
                    "stripNewLines": "",
                    "batchSize": "",
                    "timeout": "",
                    "basepath": "",
                    "dimensions": ""
                },
                "filePath": "/Applications/RamApps/AI/Flowise/packages/server/node_modules/flowise-components/dist/nodes/embeddings/OpenAIEmbedding/OpenAIEmbedding.js",
                "inputAnchors": [],
                "inputParams": [
                    {
                        "label": "Connect Credential",
                        "name": "credential",
                        "type": "credential",
                        "credentialNames": ["openAIApi"],
                        "id": "openAIEmbeddings_0-input-credential-credential"
                    },
                    {
                        "label": "Model Name",
                        "name": "modelName",
                        "type": "asyncOptions",
                        "loadMethod": "listModels",
                        "default": "text-embedding-ada-002",
                        "id": "openAIEmbeddings_0-input-modelName-asyncOptions"
                    },
                    {
                        "label": "Strip New Lines",
                        "name": "stripNewLines",
                        "type": "boolean",
                        "optional": true,
                        "additionalParams": true,
                        "id": "openAIEmbeddings_0-input-stripNewLines-boolean"
                    },
                    {
                        "label": "Batch Size",
                        "name": "batchSize",
                        "type": "number",
                        "optional": true,
                        "additionalParams": true,
                        "id": "openAIEmbeddings_0-input-batchSize-number"
                    },
                    {
                        "label": "Timeout",
                        "name": "timeout",
                        "type": "number",
                        "optional": true,
                        "additionalParams": true,
                        "id": "openAIEmbeddings_0-input-timeout-number"
                    },
                    {
                        "label": "BasePath",
                        "name": "basepath",
                        "type": "string",
                        "optional": true,
                        "additionalParams": true,
                        "id": "openAIEmbeddings_0-input-basepath-string"
                    },
                    {
                        "label": "Dimensions",
                        "name": "dimensions",
                        "type": "number",
                        "optional": true,
                        "additionalParams": true,
                        "id": "openAIEmbeddings_0-input-dimensions-number"
                    }
                ],
                "outputs": {},
                "outputAnchors": [
                    {
                        "id": "openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings",
                        "name": "openAIEmbeddings",
                        "label": "OpenAIEmbeddings",
                        "description": "OpenAI API to generate embeddings for a given text",
                        "type": "OpenAIEmbeddings | Embeddings"
                    }
                ],
                "id": "openAIEmbeddings_0",
                "selected": false
            },
            "width": 300,
            "height": 424,
            "selected": false,
            "dragging": false,
            "positionAbsolute": { "x": 461.7018426562151, "y": 655.711428475323 }
        },
        {
            "id": "qdrant_0",
            "position": { "x": -19.739946806393277, "y": 28.095810076704538 },
            "type": "customNode",
            "data": {
                "vectorStoreMethods": {},
                "label": "Qdrant",
                "name": "qdrant",
                "version": 5,
                "type": "Qdrant",
                "icon": "/Applications/RamApps/AI/Flowise/packages/server/node_modules/flowise-components/dist/nodes/vectorstores/Qdrant/qdrant.png",
                "category": "Vector Stores",
                "description": "Upsert embedded data and perform similarity search upon query using Qdrant, a scalable open source vector database written in Rust",
                "baseClasses": ["Qdrant", "VectorStoreRetriever", "BaseRetriever"],
                "credential": "",
                "inputs": {
                    "document": "",
                    "embeddings": "{{openAIEmbeddings_0.data.instance}}",
                    "recordManager": "",
                    "qdrantServerUrl": "http://localhost:6333",
                    "qdrantCollection": "RamTest",
                    "fileUpload": "",
                    "qdrantVectorDimension": 1536,
                    "contentPayloadKey": "content",
                    "metadataPayloadKey": "metadata",
                    "batchSize": "",
                    "qdrantSimilarity": "Cosine",
                    "qdrantCollectionConfiguration": "",
                    "topK": "",
                    "qdrantFilter": ""
                },
                "outputs": { "output": "retriever" },
                "filePath": "/Applications/RamApps/AI/Flowise/packages/server/node_modules/flowise-components/dist/nodes/vectorstores/Qdrant/Qdrant.js",
                "inputAnchors": [
                    {
                        "label": "Document",
                        "name": "document",
                        "type": "Document",
                        "list": true,
                        "optional": true,
                        "id": "qdrant_0-input-document-Document"
                    },
                    { "label": "Embeddings", "name": "embeddings", "type": "Embeddings", "id": "qdrant_0-input-embeddings-Embeddings" },
                    {
                        "label": "Record Manager",
                        "name": "recordManager",
                        "type": "RecordManager",
                        "description": "Keep track of the record to prevent duplication",
                        "optional": true,
                        "id": "qdrant_0-input-recordManager-RecordManager"
                    }
                ],
                "inputParams": [
                    {
                        "label": "Connect Credential",
                        "name": "credential",
                        "type": "credential",
                        "description": "Only needed when using Qdrant cloud hosted",
                        "optional": true,
                        "credentialNames": ["qdrantApi"],
                        "id": "qdrant_0-input-credential-credential"
                    },
                    {
                        "label": "Qdrant Server URL",
                        "name": "qdrantServerUrl",
                        "type": "string",
                        "placeholder": "http://localhost:6333",
                        "id": "qdrant_0-input-qdrantServerUrl-string"
                    },
                    {
                        "label": "Qdrant Collection Name",
                        "name": "qdrantCollection",
                        "type": "string",
                        "id": "qdrant_0-input-qdrantCollection-string"
                    },
                    {
                        "label": "File Upload",
                        "name": "fileUpload",
                        "description": "Allow file upload on the chat",
                        "hint": {
                            "label": "How to use",
                            "value": "\n**File Upload**\n\nThis allows file upload on the chat. Uploaded files will be upserted on the fly to the vector store.\n\n**Note:**\n- You can only turn on file upload for one vector store at a time.\n- At least one Document Loader node should be connected to the document input.\n- Document Loader should be file types like PDF, DOCX, TXT, etc.\n\n**How it works**\n- Uploaded files will have the metadata updated with the chatId.\n- This will allow the file to be associated with the chatId.\n- When querying, metadata will be filtered by chatId to retrieve files associated with the chatId.\n"
                        },
                        "type": "boolean",
                        "additionalParams": true,
                        "optional": true,
                        "id": "qdrant_0-input-fileUpload-boolean"
                    },
                    {
                        "label": "Vector Dimension",
                        "name": "qdrantVectorDimension",
                        "type": "number",
                        "default": 1536,
                        "additionalParams": true,
                        "id": "qdrant_0-input-qdrantVectorDimension-number"
                    },
                    {
                        "label": "Content Key",
                        "name": "contentPayloadKey",
                        "description": "The key for storing text. Default to `content`",
                        "type": "string",
                        "default": "content",
                        "optional": true,
                        "additionalParams": true,
                        "id": "qdrant_0-input-contentPayloadKey-string"
                    },
                    {
                        "label": "Metadata Key",
                        "name": "metadataPayloadKey",
                        "description": "The key for storing metadata. Default to `metadata`",
                        "type": "string",
                        "default": "metadata",
                        "optional": true,
                        "additionalParams": true,
                        "id": "qdrant_0-input-metadataPayloadKey-string"
                    },
                    {
                        "label": "Upsert Batch Size",
                        "name": "batchSize",
                        "type": "number",
                        "step": 1,
                        "description": "Upsert in batches of size N",
                        "additionalParams": true,
                        "optional": true,
                        "id": "qdrant_0-input-batchSize-number"
                    },
                    {
                        "label": "Similarity",
                        "name": "qdrantSimilarity",
                        "description": "Similarity measure used in Qdrant.",
                        "type": "options",
                        "default": "Cosine",
                        "options": [
                            { "label": "Cosine", "name": "Cosine" },
                            { "label": "Euclid", "name": "Euclid" },
                            { "label": "Dot", "name": "Dot" }
                        ],
                        "additionalParams": true,
                        "id": "qdrant_0-input-qdrantSimilarity-options"
                    },
                    {
                        "label": "Additional Collection Cofiguration",
                        "name": "qdrantCollectionConfiguration",
                        "description": "Refer to <a target=\"_blank\" href=\"https://qdrant.tech/documentation/concepts/collections\">collection docs</a> for more reference",
                        "type": "json",
                        "optional": true,
                        "additionalParams": true,
                        "id": "qdrant_0-input-qdrantCollectionConfiguration-json"
                    },
                    {
                        "label": "Top K",
                        "name": "topK",
                        "description": "Number of top results to fetch. Default to 4",
                        "placeholder": "4",
                        "type": "number",
                        "additionalParams": true,
                        "optional": true,
                        "id": "qdrant_0-input-topK-number"
                    },
                    {
                        "label": "Qdrant Search Filter",
                        "name": "qdrantFilter",
                        "description": "Only return points which satisfy the conditions",
                        "type": "json",
                        "additionalParams": true,
                        "optional": true,
                        "id": "qdrant_0-input-qdrantFilter-json"
                    }
                ],
                "outputAnchors": [
                    {
                        "name": "output",
                        "label": "Output",
                        "type": "options",
                        "description": "",
                        "options": [
                            {
                                "id": "qdrant_0-output-retriever-Qdrant|VectorStoreRetriever|BaseRetriever",
                                "name": "retriever",
                                "label": "Qdrant Retriever",
                                "description": "",
                                "type": "Qdrant | VectorStoreRetriever | BaseRetriever"
                            },
                            {
                                "id": "qdrant_0-output-vectorStore-Qdrant|VectorStore",
                                "name": "vectorStore",
                                "label": "Qdrant Vector Store",
                                "description": "",
                                "type": "Qdrant | VectorStore"
                            }
                        ],
                        "default": "retriever"
                    }
                ],
                "id": "qdrant_0",
                "selected": false
            },
            "width": 300,
            "height": 704,
            "selected": false,
            "positionAbsolute": { "x": -19.739946806393277, "y": 28.095810076704538 },
            "dragging": false
        },
        {
            "id": "chatOpenAI_0",
            "position": { "x": 784.3498848465506, "y": 125.59648670756897 },
            "type": "customNode",
            "data": {
                "loadMethods": {},
                "label": "ChatOpenAI",
                "name": "chatOpenAI",
                "version": 8,
                "type": "ChatOpenAI",
                "icon": "/Applications/RamApps/AI/Flowise/packages/server/node_modules/flowise-components/dist/nodes/chatmodels/ChatOpenAI/openai.svg",
                "category": "Chat Models",
                "description": "Wrapper around OpenAI large language models that use the Chat endpoint",
                "baseClasses": ["ChatOpenAI", "BaseChatModel", "BaseLanguageModel", "Runnable"],
                "credential": "1389c6c9-eb45-4632-a633-17748dc5d31b",
                "inputs": {
                    "cache": "",
                    "modelName": "gpt-4o-mini",
                    "temperature": 0.9,
                    "streaming": true,
                    "maxTokens": "",
                    "topP": "",
                    "frequencyPenalty": "",
                    "presencePenalty": "",
                    "timeout": "",
                    "basepath": "",
                    "proxyUrl": "",
                    "stopSequence": "",
                    "baseOptions": "",
                    "allowImageUploads": "",
                    "imageResolution": "low"
                },
                "filePath": "/Applications/RamApps/AI/Flowise/packages/server/node_modules/flowise-components/dist/nodes/chatmodels/ChatOpenAI/ChatOpenAI.js",
                "inputAnchors": [
                    { "label": "Cache", "name": "cache", "type": "BaseCache", "optional": true, "id": "chatOpenAI_0-input-cache-BaseCache" }
                ],
                "inputParams": [
                    {
                        "label": "Connect Credential",
                        "name": "credential",
                        "type": "credential",
                        "credentialNames": ["openAIApi"],
                        "id": "chatOpenAI_0-input-credential-credential"
                    },
                    {
                        "label": "Model Name",
                        "name": "modelName",
                        "type": "asyncOptions",
                        "loadMethod": "listModels",
                        "default": "gpt-4o-mini",
                        "id": "chatOpenAI_0-input-modelName-asyncOptions"
                    },
                    {
                        "label": "Temperature",
                        "name": "temperature",
                        "type": "number",
                        "step": 0.1,
                        "default": 0.9,
                        "optional": true,
                        "id": "chatOpenAI_0-input-temperature-number"
                    },
                    {
                        "label": "Streaming",
                        "name": "streaming",
                        "type": "boolean",
                        "default": true,
                        "optional": true,
                        "additionalParams": true,
                        "id": "chatOpenAI_0-input-streaming-boolean"
                    },
                    {
                        "label": "Max Tokens",
                        "name": "maxTokens",
                        "type": "number",
                        "step": 1,
                        "optional": true,
                        "additionalParams": true,
                        "id": "chatOpenAI_0-input-maxTokens-number"
                    },
                    {
                        "label": "Top Probability",
                        "name": "topP",
                        "type": "number",
                        "step": 0.1,
                        "optional": true,
                        "additionalParams": true,
                        "id": "chatOpenAI_0-input-topP-number"
                    },
                    {
                        "label": "Frequency Penalty",
                        "name": "frequencyPenalty",
                        "type": "number",
                        "step": 0.1,
                        "optional": true,
                        "additionalParams": true,
                        "id": "chatOpenAI_0-input-frequencyPenalty-number"
                    },
                    {
                        "label": "Presence Penalty",
                        "name": "presencePenalty",
                        "type": "number",
                        "step": 0.1,
                        "optional": true,
                        "additionalParams": true,
                        "id": "chatOpenAI_0-input-presencePenalty-number"
                    },
                    {
                        "label": "Timeout",
                        "name": "timeout",
                        "type": "number",
                        "step": 1,
                        "optional": true,
                        "additionalParams": true,
                        "id": "chatOpenAI_0-input-timeout-number"
                    },
                    {
                        "label": "BasePath",
                        "name": "basepath",
                        "type": "string",
                        "optional": true,
                        "additionalParams": true,
                        "id": "chatOpenAI_0-input-basepath-string"
                    },
                    {
                        "label": "Proxy Url",
                        "name": "proxyUrl",
                        "type": "string",
                        "optional": true,
                        "additionalParams": true,
                        "id": "chatOpenAI_0-input-proxyUrl-string"
                    },
                    {
                        "label": "Stop Sequence",
                        "name": "stopSequence",
                        "type": "string",
                        "rows": 4,
                        "optional": true,
                        "description": "List of stop words to use when generating. Use comma to separate multiple stop words.",
                        "additionalParams": true,
                        "id": "chatOpenAI_0-input-stopSequence-string"
                    },
                    {
                        "label": "BaseOptions",
                        "name": "baseOptions",
                        "type": "json",
                        "optional": true,
                        "additionalParams": true,
                        "id": "chatOpenAI_0-input-baseOptions-json"
                    },
                    {
                        "label": "Allow Image Uploads",
                        "name": "allowImageUploads",
                        "type": "boolean",
                        "description": "Allow image input. Refer to the <a href=\"https://docs.flowiseai.com/using-flowise/uploads#image\" target=\"_blank\">docs</a> for more details.",
                        "default": false,
                        "optional": true,
                        "id": "chatOpenAI_0-input-allowImageUploads-boolean"
                    },
                    {
                        "label": "Image Resolution",
                        "description": "This parameter controls the resolution in which the model views the image.",
                        "name": "imageResolution",
                        "type": "options",
                        "options": [
                            { "label": "Low", "name": "low" },
                            { "label": "High", "name": "high" },
                            { "label": "Auto", "name": "auto" }
                        ],
                        "default": "low",
                        "optional": false,
                        "additionalParams": true,
                        "id": "chatOpenAI_0-input-imageResolution-options"
                    }
                ],
                "outputs": {},
                "outputAnchors": [
                    {
                        "id": "chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable",
                        "name": "chatOpenAI",
                        "label": "ChatOpenAI",
                        "description": "Wrapper around OpenAI large language models that use the Chat endpoint",
                        "type": "ChatOpenAI | BaseChatModel | BaseLanguageModel | Runnable"
                    }
                ],
                "id": "chatOpenAI_0",
                "selected": false
            },
            "width": 300,
            "height": 670,
            "selected": false,
            "dragging": false,
            "positionAbsolute": { "x": 784.3498848465506, "y": 125.59648670756897 }
        },
        {
            "id": "conversationalRetrievalQAChain_0",
            "position": { "x": 1175.072775785948, "y": 322.3807589889784 },
            "type": "customNode",
            "data": {
                "label": "Conversational Retrieval QA Chain",
                "name": "conversationalRetrievalQAChain",
                "version": 3,
                "type": "ConversationalRetrievalQAChain",
                "icon": "/Applications/RamApps/AI/Flowise/packages/server/node_modules/flowise-components/dist/nodes/chains/ConversationalRetrievalQAChain/qa.svg",
                "category": "Chains",
                "description": "Document QA - built on RetrievalQAChain to provide a chat history component",
                "baseClasses": ["ConversationalRetrievalQAChain", "BaseChain", "Runnable"],
                "inputs": {
                    "model": "{{chatOpenAI_0.data.instance}}",
                    "vectorStoreRetriever": "{{qdrant_0.data.instance}}",
                    "memory": "",
                    "returnSourceDocuments": "",
                    "rephrasePrompt": "Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.\n\nChat History:\n{chat_history}\nFollow Up Input: {question}\nStandalone Question:",
                    "responsePrompt": "I want you to act as a document that I am having a conversation with. Your name is \"AI Assistant\". Using the provided context, answer the user's question to the best of your ability using the resources provided.\nIf there is nothing in the context relevant to the question at hand, just say \"Hmm, I'm not sure\" and stop after that. Refuse to answer any question not about the info. Never break character.\n------------\n{context}\n------------\nREMEMBER: If there is no relevant information within the context, just say \"Hmm, I'm not sure\". Don't try to make up an answer. Never break character.",
                    "inputModeration": ""
                },
                "filePath": "/Applications/RamApps/AI/Flowise/packages/server/node_modules/flowise-components/dist/nodes/chains/ConversationalRetrievalQAChain/ConversationalRetrievalQAChain.js",
                "inputAnchors": [
                    {
                        "label": "Chat Model",
                        "name": "model",
                        "type": "BaseChatModel",
                        "id": "conversationalRetrievalQAChain_0-input-model-BaseChatModel"
                    },
                    {
                        "label": "Vector Store Retriever",
                        "name": "vectorStoreRetriever",
                        "type": "BaseRetriever",
                        "id": "conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever"
                    },
                    {
                        "label": "Memory",
                        "name": "memory",
                        "type": "BaseMemory",
                        "optional": true,
                        "description": "If left empty, a default BufferMemory will be used",
                        "id": "conversationalRetrievalQAChain_0-input-memory-BaseMemory"
                    },
                    {
                        "label": "Input Moderation",
                        "description": "Detect text that could generate harmful output and prevent it from being sent to the language model",
                        "name": "inputModeration",
                        "type": "Moderation",
                        "optional": true,
                        "list": true,
                        "id": "conversationalRetrievalQAChain_0-input-inputModeration-Moderation"
                    }
                ],
                "inputParams": [
                    {
                        "label": "Return Source Documents",
                        "name": "returnSourceDocuments",
                        "type": "boolean",
                        "optional": true,
                        "id": "conversationalRetrievalQAChain_0-input-returnSourceDocuments-boolean"
                    },
                    {
                        "label": "Rephrase Prompt",
                        "name": "rephrasePrompt",
                        "type": "string",
                        "description": "Using previous chat history, rephrase question into a standalone question",
                        "warning": "Prompt must include input variables: {chat_history} and {question}",
                        "rows": 4,
                        "additionalParams": true,
                        "optional": true,
                        "default": "Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.\n\nChat History:\n{chat_history}\nFollow Up Input: {question}\nStandalone Question:",
                        "id": "conversationalRetrievalQAChain_0-input-rephrasePrompt-string"
                    },
                    {
                        "label": "Response Prompt",
                        "name": "responsePrompt",
                        "type": "string",
                        "description": "Taking the rephrased question, search for answer from the provided context",
                        "warning": "Prompt must include input variable: {context}",
                        "rows": 4,
                        "additionalParams": true,
                        "optional": true,
                        "default": "I want you to act as a document that I am having a conversation with. Your name is \"AI Assistant\". Using the provided context, answer the user's question to the best of your ability using the resources provided.\nIf there is nothing in the context relevant to the question at hand, just say \"Hmm, I'm not sure\" and stop after that. Refuse to answer any question not about the info. Never break character.\n------------\n{context}\n------------\nREMEMBER: If there is no relevant information within the context, just say \"Hmm, I'm not sure\". Don't try to make up an answer. Never break character.",
                        "id": "conversationalRetrievalQAChain_0-input-responsePrompt-string"
                    }
                ],
                "outputs": {},
                "outputAnchors": [
                    {
                        "id": "conversationalRetrievalQAChain_0-output-conversationalRetrievalQAChain-ConversationalRetrievalQAChain|BaseChain|Runnable",
                        "name": "conversationalRetrievalQAChain",
                        "label": "ConversationalRetrievalQAChain",
                        "description": "Document QA - built on RetrievalQAChain to provide a chat history component",
                        "type": "ConversationalRetrievalQAChain | BaseChain | Runnable"
                    }
                ],
                "id": "conversationalRetrievalQAChain_0",
                "selected": false
            },
            "width": 300,
            "height": 532,
            "selected": false,
            "dragging": false,
            "positionAbsolute": { "x": 1175.072775785948, "y": 322.3807589889784 }
        }
    ],
    "edges": [
        {
            "source": "chatOpenAI_0",
            "sourceHandle": "chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable",
            "target": "conversationalRetrievalQAChain_0",
            "targetHandle": "conversationalRetrievalQAChain_0-input-model-BaseChatModel",
            "type": "buttonedge",
            "id": "chatOpenAI_0-chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable-conversationalRetrievalQAChain_0-conversationalRetrievalQAChain_0-input-model-BaseChatModel"
        },
        {
            "source": "qdrant_0",
            "sourceHandle": "qdrant_0-output-retriever-Qdrant|VectorStoreRetriever|BaseRetriever",
            "target": "conversationalRetrievalQAChain_0",
            "targetHandle": "conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever",
            "type": "buttonedge",
            "id": "qdrant_0-qdrant_0-output-retriever-Qdrant|VectorStoreRetriever|BaseRetriever-conversationalRetrievalQAChain_0-conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever"
        },
        {
            "source": "openAIEmbeddings_0",
            "sourceHandle": "openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings",
            "target": "qdrant_0",
            "targetHandle": "qdrant_0-input-embeddings-Embeddings",
            "type": "buttonedge",
            "id": "openAIEmbeddings_0-openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings-qdrant_0-qdrant_0-input-embeddings-Embeddings"
        }
    ],
    "viewport": { "x": 268.3895529284789, "y": -75.50514788200124, "zoom": 0.6459199675371953 }
}
